generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prismabox { 
  provider = "prismabox"
  typeboxImportDependencyName = "elysia"
  typeboxImportVariableName = "t"
  inputModel = true
} 

model Customer {
  id             Int             @id @default(autoincrement())
  lineUserId     String          @unique
  name           String
  email          String          @unique
  phone          String?
  address        String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  products       Product[]
  repairRequests RepairRequest[]
}

model Technician {
  id             Int         @id @default(autoincrement())
  name           String
  email          String?     @unique
  phone          String?
  specialization String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @default(now())
  repairJobs     RepairJob[]
  repairLogs     RepairLog[]
}

model Product {
  id             Int             @id @default(autoincrement())
  productCode    String          @unique
  name           String
  model          String
  description    String?
  customerId     Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customer       Customer        @relation(fields: [customerId], references: [id])
  repairRequests RepairRequest[]
}

model RepairRequest {
  id                 Int                 @id @default(autoincrement())
  requestNo          String              @unique
  problemDescription String
  requestDate        DateTime            @default(now())
  status             RepairRequestStatus @default(PENDING)
  customerId         Int
  productId          Int
  repairJob          RepairJob?
  customer           Customer            @relation(fields: [customerId], references: [id])
  product            Product             @relation(fields: [productId], references: [id])
}

model RepairJob {
  id              Int              @id @default(autoincrement())
  jobNo           String           @unique
  assignedDate    DateTime?        @default(now())
  jobStatus       JobStatus        @default(PENDING)
  totalCost       Decimal          @default(0.00) @db.Decimal(10, 2)
  approvalStatus  ApprovalStatus   @default(WAITING)
  approvalDate    DateTime?
  approvedBy      String?
  completedDate   DateTime?
  repairRequestId Int              @unique
  technicianId    Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  repairApprovals RepairApproval[]
  repairRequest   RepairRequest    @relation(fields: [repairRequestId], references: [id])
  technician      Technician       @relation(fields: [technicianId], references: [id])
  repairJobItems  RepairJobItem[]
  repairLogs      RepairLog[]
}

model RepairJobItem {
  id          Int         @id @default(autoincrement())
  itemType    JobItemType
  description String
  quantity    Int         @default(1)
  unitPrice   Decimal     @db.Decimal(10, 2)
  totalPrice  Decimal     @db.Decimal(10, 2)
  remarks     String?
  repairJobId Int
  repairJob   RepairJob   @relation(fields: [repairJobId], references: [id])
}

model RepairApproval {
  id             Int            @id @default(autoincrement())
  approverName   String
  approvalDate   DateTime       @default(now())
  approvalStatus ApprovalStatus @default(WAITING)
  comments       String?
  repairJobId    Int
  repairJob      RepairJob      @relation(fields: [repairJobId], references: [id])
}

model RepairLog {
  id           Int        @id @default(autoincrement())
  action       String
  logDate      DateTime   @default(now())
  statusAfter  JobStatus
  notes        String?
  repairJobId  Int
  technicianId Int
  createdAt    DateTime   @default(now())
  repairJob    RepairJob  @relation(fields: [repairJobId], references: [id])
  technician   Technician @relation(fields: [technicianId], references: [id])
}

enum RepairRequestStatus {
  PENDING
  RECEIVED
  UNDER_REVIEW
  APPROVED
  REJECTED
  CANCELLED
  JOB_CREATED
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  WAITING_PARTS
  APPROVED
  COMPLETED
  RETURNED
  CANCELLED
}

enum RepairStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  WAITING_PARTS
  REPAIRED
  RETURNED
  CANCELLED
}

enum ApprovalStatus {
  WAITING
  APPROVED
  REJECTED
}

enum JobItemType {
  PART
  LABOR
  SERVICE
  OTHER
}
